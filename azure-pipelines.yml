# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

variables:
  azureSubscription: 'Azure for Students(6fe2560e-f4f7-4f9c-a795-25e76b14826e)'
  webAppName: 'ASPE2'
  vmImageName: 'ubuntu-latest'
  rootFolder: $(System.DefaultWorkingDirectory)
  environmentName: 'Test'

stages:
  - stage: Build
    displayName: Build stage
    variables:
      phpVersion: latest
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            workingDirectory: $(rootFolder)
            displayName: 'Use PHP version $(phpVersion)'

          - script: composer install --dev --no-interaction --prefer-dist
            workingDirectory: $(rootFolder)
            displayName: 'Composer install dev'

#          - script: './vendor/bin/phpunit'
#            displayName: 'Run tests with phpunit'

#          - task: PublishTestResults@2
#            inputs:
#              testRunner: 'JUnit'
#              testResultsFiles: '**/TEST-*.xml'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: $(Build.ArtifactStagingDirectory)
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: $(Build.ArtifactStagingDirectory)/release/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/release/$(Build.BuildId).zip
            displayName: 'Upload package'
            artifact: drop

  - stage: Deploy
    displayName: 'Deploy Web App'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          vmImage: $(vmImageName)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(webAppName)
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

#steps:
#  - task: CopyFiles@2
#    inputs:
#      SourceFolder: '$(Build.SourcesDirectory)'
#      Contents: |
#        **/**
#        !**/.git/**
#      TargetFolder: '$(Build.ArtifactStagingDirectory)'
#      CleanTargetFolder: true
#      OverWrite: true
#    displayName: 'Copy files to publish directory'



#  - task: PublishBuildArtifacts@1
#    inputs:
#      PathtoPublish: '$(Build.ArtifactStagingDirectory)/release'
#      ArtifactName: 'release'
#      publishLocation: 'Container'
#      StoreAsTar: false
#
#  - task: DownloadBuildArtifacts@1
#    inputs:
#      buildType: 'current'
#      downloadType: 'single'
#      artifactName: 'release'
#      downloadPath: '$(System.DefaultWorkingDirectory)'
#
#  - task: AzureRmWebAppDeployment@4
#    inputs:
#      ConnectionType: 'AzureRM'
#      azureSubscription: '$(azureSubscription)'
#      appType: 'webAppLinux'
#      WebAppName: '$(webAppName)'
#      packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
#      RuntimeStack: 'PHP|8.1'
#
#  - task: AzureAppServiceManage@0
#    inputs:
#      azureSubscription: '$(azureSubscription)'
#      Action: 'Restart Azure App Service'
#      WebAppName: '$(webAppName)'
